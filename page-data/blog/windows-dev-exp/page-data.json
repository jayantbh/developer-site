{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/windows-dev-exp/","result":{"data":{"site":{"siteMetadata":{"title":"Jayant's Clipboard","author":"Jayant Bhawal"}},"mdx":{"id":"996238e9-0d47-5eb8-bf77-b9991243d8f8","excerpt":"Till pretty recently, if I had to write some code, I wouldn't touch Windows with\na 6 foot pole. I've written code on MacOS or Ubuntu most of my brief-so-farâ€¦","frontmatter":{"title":"How does Windows compare with MacOS or Linux for Dev-ex now?","date":"April 17, 2021"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How does Windows compare with MacOS or Linux for Dev-ex now?\",\n  \"desc\": \"A study on how Windows has evolved over time to offer a developer experience that comes pretty close to MacOS or Linux\",\n  \"date\": \"2021-04-17\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Till pretty recently, if I had to write some code, I wouldn\\u2019t touch Windows with\\na 6 foot pole. I\\u2019ve written code on MacOS or Ubuntu most of my brief-so-far\\ncareer, but I\\u2019ve given windows a serious shot, and, it\\u2019s just not worked out for\\nme. The Command Prompt, or even Powershell, are just miles and miles away from\\nwhat iTerm 2 on MacOS can offer. Or similar Ubuntu terminals. And then there\\u2019s\\nshells like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Z_shell\"\n  }, \"Zsh\"), \" (especially with\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ohmyz.sh/\"\n  }, \"oh-my-zsh\"), \"!) or \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://fishshell.com/\"\n  }, \"Fish\"), \" that are just\\nso amazing! Not to mention tht Ubuntu\\u2019s apt, or \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://snapcraft.io/\"\n  }, \"snap\"), \",\\nand MacOS\\u2019s \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://brew.sh/\"\n  }, \"Homebrew\"), \" (also on Ubuntu now) are exceptionally\\nloaded package-managers. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://chocolatey.org/\"\n  }, \"Chocolatey\"), \" on Windows really\\ndoesn\\u2019t come close.\"), mdx(\"p\", null, \"But, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"what do I exactly mean by that?\"), \" Why is CMD or Powershell miles away?\\nWhy do I like Z-Shell over the Windows shell? And is my mind changed with the\\nintroduction of the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.microsoft.com/p/windows-terminal-preview/9n0dx20hk701\"\n  }, \"Windows Terminal\"), \"?\"), mdx(\"p\", null, \"I\\u2019ll try to elaborate on that, and you can reach out to me on \", mdx(ExternalLink, {\n    to: 'https://twitter.com/jayantbhawal',\n    mdxType: \"ExternalLink\"\n  }, \"Twitter\"), \" with questions,\\ncomplaints, or corrections.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"First, the terminal\"), mdx(\"p\", null, \"I\\u2019ve used about half a dozen terminals so far. On MacOS, it\\u2019s been Apple\\nTerminal, and then iTerm2 for most of my time.\"), mdx(\"p\", null, \"The level of customization that they offer is incredible, they allow you to\\nexport/import themes, keybindings, and they support an incredible number of\\nsettings and tweaks to make the terminal truly your own.\"), mdx(\"p\", null, \"iTerm2 goes far beyond the capabilities of Apple Terminal by introducing\\nfeatures like Window Splitting, more powerful theming, built-in\\nautocompletion(!!!), open links or files from URLs in the terminal, really solid\\nintegration with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Z_shell\"\n  }, \"Z Shell\"), \", etc.\"), mdx(InlineImages, {\n    height: 250,\n    images: [{\n      url: iterm2,\n      caption: mdx(\"a\", {\n        href: \"https://iterm2.com/features.html\"\n      }, \"iTerm 2\")\n    }, {\n      url: appleTerm,\n      caption: mdx(\"a\", {\n        href: \"https://en.wikipedia.org/wiki/Terminal_(macOS)\"\n      }, \"Apple Terminal\")\n    }],\n    mdxType: \"InlineImages\"\n  }), mdx(\"p\", null, \"Command Prompt does not offer any of that! You have some absolute barebones\\ntheming with a handful of colours, but, it\\u2019s extremely barebones!\"), mdx(\"p\", null, \"There\\u2019s \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://cmder.net/\"\n  }, \"Cmder\"), \", which is honestly quite decent, but, it\\ntries to build on top of the existing CMD stuff, which feels very obvious when\\nyou use it, and, it\\u2019s just not as smooth an experience.\"), mdx(\"p\", null, \"Now,\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.microsoft.com/p/windows-terminal-preview/9n0dx20hk701\"\n  }, \"Windows Terminal\"), \"\\nis worth talking about. It\\u2019s quite configurable, works really well with\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/windows/wsl/install-win10\"\n  }, \"WSL\"), \", has many of\\nthe iTerm2 features, including importable themes, window splitting, and a few\\nother things, supports custom fonts or ligatures well enough for me, it\\u2019s a\\npretty great experience. Never going back to CMD or Cmder after this. And, this\\nis probably the biggest difference in recent times that I\\u2019ve experienced\\nregarding being able to develop on windows.\"), mdx(\"p\", null, \"It does help that it works really well with WSL, so my zsh profiles that I was\\nusing on Ubuntu or MacOS, can be used as-is on Windows, and any fancy symbols\\nand stuff that I used will work mostly the same way. It really has gotten much\\nbetter.\"), mdx(InlineImages, {\n    height: 250,\n    images: [{\n      url: winTerm,\n      caption: mdx(\"a\", {\n        href: \"https://www.microsoft.com/p/windows-terminal-preview/9n0dx20hk701\"\n      }, \"Windows Terminal\")\n    }],\n    mdxType: \"InlineImages\"\n  }), mdx(\"h2\", null, \"Then, the shell\"), mdx(\"p\", null, \"While the bash shell is quite good, the ecosystem of Z Shell is straight-up\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"incredible!\"), \". Have you seen \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ohmyz.sh/\"\n  }, \"oh-my-zsh\"), \"? It has its own\\nplugin and theming system which is just so crazy! Here, take a look at some of\\nthe \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\"\n  }, \"prompt themes\"), \" with\\noh-my-zsh that require almost zero configuration.\"), mdx(InlineImages, {\n    height: 250,\n    images: [{\n      url: prompts,\n      caption: 'Several oh-my-zsh themed prompts'\n    }],\n    mdxType: \"InlineImages\"\n  }), mdx(\"br\", null), mdx(\"p\", null, \"This plugin is my favorite:\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/romkatv/powerlevel10k\"\n  }, \"Powerlevel10k\")), mdx(\"p\", null, \"Your prompt can change depending on what commands you\\u2019re running, what project\\ndirectory you are in, etc.\"), mdx(\"p\", null, \"For example: If you were in a node or npm/yarn based project directory, the\\nright side of the prompt may show you the current node/npm/yarn version.\"), mdx(\"p\", null, \"There\\u2019s also \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://fishshell.com/\"\n  }, \"Fish shell\"), \" that has a ton of advanced\\nfeatures, a lot of them being present in Zsh too, but I\\u2019ve not used it in a\\nwhile, not since most of the features that I personally cared about were brought\\nto Zsh as well.\"), mdx(\"p\", null, \"You can do a very limited version of any of this in CMD. Though, if you\\u2019re\\nrunning Windows Terminal, a lot more is possible when you\\u2019re inside WSL, but,\\nnot so much within Windows itself. CMD inside WSL doesn\\u2019t handle all the\\nfanciness well enough.\"), mdx(\"h2\", null, \"Lastly, the ecosystem\"), mdx(\"p\", null, \"Now, one of the major factors for folks working on any platform is, availability\\nand ease-of-install of tools or packages.\"), mdx(\"p\", null, \"You want to be able to install apache, node, or cowsay as painlessly and quickly\\nas possible. You want the same ease of install even if your package happens to\\nbe a bit more obscure, and that\\u2019s only possible if your desired package is in\\nthe package registry at all.\"), mdx(\"p\", null, \"Here\\u2019s a list of the popular package managers for each OS with their package\\ncounts (May 2021):\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"apt: 78406\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"macports: 26381\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"brew: 5700\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"chocolatey: 8459\")), mdx(\"p\", null, \"Here, apt is miles head. MacOS has macports and brew, for a total of ~32k\\npackages. Chocolatey used to be the only package manager on Windows, and with\\n8.5k packages, it\\u2019s a bit limited, but honestly, it\\u2019ll have most packages that\\nsomeone needs.\"), mdx(\"p\", null, \"Windows is already getting a first-party package manager called\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://devblogs.microsoft.com/commandline/windows-package-manager-preview/\"\n  }, \"Winget\"), \",\\nbut it\\u2019s new, and time will tell how well it flies. I\\u2019m hoping pretty well.\"), mdx(\"p\", null, \"As of today, the situation with packages on windows is much better than it used\\nto be. There was a time when you had to install things using installers, for\\nsoftware that you\\u2019d use a package manager for in other systems, it wasn\\u2019t a very\\nuniform experience.\"), mdx(\"h2\", null, \"Final notes\"), mdx(\"p\", null, \"Today, I think that Windows works pretty well for software development as far as\\nmy use-cases go, which is Web Development. WSL has been a game-changer since it\\ncame out, and Windows terminal removes the last pain point with achieving the\\nLinux experience on Windows to a great extent.\"), mdx(\"p\", null, \"Windows itself needs a little more polish to be as smooth an experience as\\nMacOS, but folks who haven\\u2019t used MacOS won\\u2019t really be bothered.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"allFile":{"nodes":[{"publicURL":"/static/415ff3df9d06c9fc8ae67811b1b4031c/996238e9-0d47-5eb8-bf77-b9991243d8f8.png"}]}},"pageContext":{"slug":"/windows-dev-exp/","metaImg":"**/996238e9-0d47-5eb8-bf77-b9991243d8f8.png","previous":{"id":"7f599b1b-ee4a-5c6c-9e5b-760b74236a35","excerpt":"Recently I discovered  PowerToys . If\nyou don't know about this, then congratulations because you should totally\ninstall this right now. Itâ€¦","fields":{"slug":"/windows-powertoys/"},"frontmatter":{"title":"Windows Powertoys - Did you know it was a thing?","date":"2021-04-02","desc":"Windows Powertoys introduces a bunch of tools that you wish were part of Windows by default since... forever!"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Windows Powertoys - Did you know it was a thing?\",\n  \"desc\": \"Windows Powertoys introduces a bunch of tools that you wish were part of Windows by default since... forever!\",\n  \"date\": \"2021-04-02\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Recently I discovered \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/microsoft/PowerToys\"\n  }, \"PowerToys\"), \". If\\nyou don\\u2019t know about this, then congratulations because you should totally\\ninstall this right now. It surely has something you can make use of!\"), mdx(\"p\", null, \"PowerToys is basically a set of tools that are \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"nice-to-have\"), \"s for most people.\\nIt\\u2019s things like a Color Picker, Window Zones, Spotlight (from MacOS), Bulk\\nRename, etc. As of this date, there are 9 tools in total.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Click to see the list of all the tools\"), mdx(\"div\", {\n    style: {\n      paddingLeft: '1em'\n    }\n  }, mdx(\"details\", null, mdx(\"summary\", null, \"Color Picker\"), \"Literally a system-wide color picker that supports Hex, RGB, and HSL!\", mdx(InlineImages, {\n    images: ['https://docs.microsoft.com/en-in/windows/images/pt-colorpicker-hex-editor.png'],\n    mdxType: \"InlineImages\"\n  })), mdx(\"details\", null, mdx(\"summary\", null, \"Fancy Zones\"), \"Windows already had some seriously solid window tiling, but fancy zones takes it to the next level!\", mdx(InlineImages, {\n    images: ['https://docs.microsoft.com/en-in/windows/images/pt-fancyzones-grideditor.png'],\n    mdxType: \"InlineImages\"\n  })), mdx(\"details\", null, mdx(\"summary\", null, \"File Explorer add-ons (Preview Pane)\"), \"Now you can preview SVGs and Markdown files in the preview pane!\", mdx(InlineImages, {\n    images: ['https://docs.microsoft.com/en-in/windows/images/powertoys-fileexplorer.gif'],\n    mdxType: \"InlineImages\"\n  })), mdx(\"details\", null, mdx(\"summary\", null, \"Image Resizer\"), \"Bulk Image resizing. It's not something I would use often, but there have been times when I had to use [IrfanView](https://www.irfanview.com/) to achieve this functionality.\", mdx(InlineImages, {\n    images: ['https://docs.microsoft.com/en-in/windows/images/powertoys-resize-images.gif'],\n    mdxType: \"InlineImages\"\n  })), mdx(\"details\", null, mdx(\"summary\", null, \"Keyboard Manager\"), \"I'll probably not use this much either, but again, it's a great feature by itself!\", mdx(InlineImages, {\n    images: ['https://docs.microsoft.com/en-in/windows/images/powertoys-keyboard-remap.png'],\n    mdxType: \"InlineImages\"\n  })), mdx(\"details\", null, mdx(\"summary\", null, \"Power Rename\"), \"There were a few times when I had to use third-party tools to do this.\", mdx(InlineImages, {\n    images: ['https://docs.microsoft.com/en-in/windows/images/powerrename-demo.gif'],\n    mdxType: \"InlineImages\"\n  })), mdx(\"details\", null, mdx(\"summary\", null, \"PowerToys Run (Spotlight)\"), \"SO MUCH YES! This is basically MacOS's Spotlight, though slightly limited in functionality. But this is so good nonetheless!\", mdx(InlineImages, {\n    images: ['https://docs.microsoft.com/en-in/windows/images/pt-powerrun-demo.gif'],\n    mdxType: \"InlineImages\"\n  })), mdx(\"details\", null, mdx(\"summary\", null, \"Shortcut Guide\"), \"It's useful sometimes... sometimes.\", mdx(InlineImages, {\n    images: ['https://docs.microsoft.com/en-in/windows/images/pt-shortcut-guide-large.png'],\n    mdxType: \"InlineImages\"\n  })), mdx(\"details\", null, mdx(\"summary\", null, \"Video Conference Mute\"), \"I guess it's handy if you can't disable mic/cam by other means.\", mdx(InlineImages, {\n    images: ['https://docs.microsoft.com/en-in/windows/images/pt-video-conference-mute-settings.png'],\n    mdxType: \"InlineImages\"\n  })))), mdx(\"p\", null, \"My favorites are Fancy Zones, and PowerToys Run.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Fancy Zones\"), \" allows me to create custom layout grids that I can snap windows\\nto using hotkeys (Win + Left/Right). It\\u2019s exceptionally useful when I want a\\ndashboard like setup going on with multiple windows. For example: I\\u2019m writing\\nsome code, but I don\\u2019t need the whole screen for that. So the top half of the\\nremaining half of the screen is taken up by Slack, and the bottom half by\\nDiscord or something!\"), mdx(InlineImages, {\n    images: ['https://docs.microsoft.com/en-in/windows/images/pt-fancyzones-quickswap.gif'],\n    mdxType: \"InlineImages\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PowerToys Run\"), \" is just so good for when I want to launch an app, or do quick\\nmath. I don\\u2019t need to pin a dozen things to my taskbar anymore, or find an icon\\non the desktop, or start menu. You know, basically do Spotlight things!\"), mdx(\"p\", null, \"I can\\u2019t however, do currency conversions in it yet.\"), mdx(InlineImages, {\n    images: ['https://docs.microsoft.com/en-in/windows/images/pt-powerrun-demo.gif'],\n    mdxType: \"InlineImages\"\n  }), mdx(\"p\", null, \"Here\\u2019s the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/microsoft/PowerToys/releases/\"\n  }, \"link\"), \" to the\\nreleases page if you\\u2019re interested!\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":1},"next":{"id":"f444cbbe-62ae-514a-b2e7-1a7c6013c7bd","excerpt":"Here's how the actual component looks like, roughly Framer Motion  is a high level UI animations\nlibrary that makes a LOT of animations useâ€¦","fields":{"slug":"/framer-motion-essentials/"},"frontmatter":{"title":"Getting you interested in Framer Motion with the essentials","date":"2021-06-04","desc":"Framer Motion is a high level UI animations library that uses mostly CSS transforms to provide complex animation experiences for minimal effort"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting you interested in Framer Motion with the essentials\",\n  \"desc\": \"Framer Motion is a high level UI animations library that uses mostly CSS transforms to provide complex animation experiences for minimal effort\",\n  \"date\": \"2021-06-04\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"render(<StarGraphic length={1} offset={0} duration={4} />);\\n\")), mdx(\"sub\", {\n    className: \"text-center\"\n  }, \"A crude little SVG animation using framer motion\"), mdx(\"br\", null), mdx(\"br\", null), \"This animation you see here could be very easily done using plain JS, so maybe it doesn't do the best job of showing why you should add 32kBs extra to your bundle size delivered over the network. But, look at how easy this was to achieve!\", mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", null, \"Here\\u2019s how the actual component looks like, roughly\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"hideable hidden\",\n    \"hideable\": true,\n    \"hidden\": true\n  }, \"<svg ...>\\n  <g ...>\\n    <motion.path\\n      initial={{ pathLength: 0, pathOffset: 0 }}\\n      animate={{ pathLength: 1, pathOffset: 0 }}\\n      transition={{ duration: 4 }}\\n      d='...'\\n      ...\\n    />\\n  </g>\\n  ...\\n</svg>\\n\")), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.framer.com/motion/\"\n  }, \"Framer Motion\"), \" is a high level UI animations\\nlibrary that makes a LOT of animations use-cases extremely simple. It even\\noffers a really simple way to even use\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://css-tricks.com/shared-element-transitions/\"\n  }, \"shared element transitions\"), \"!\\nSee my experiment with no libraries,\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://jayant.tech/experiments/shared-element-transitions#/\"\n  }, \"here\"), \", and the\\ncode \", mdx(ExternalLink, {\n    to: \"https://github.com/jayantbh/experiments/blob/master/src/components/SharedElementTransitions/index.tsx\",\n    mdxType: \"ExternalLink\"\n  }, \"here\"), \".\"), mdx(\"p\", null, \"Now, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this isn\\u2019t a tutorial\"), \", this is just something to get you interested\\nwith examples that you can implement in most apps.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Following is a list of things you can do, and remember, for code examples, find\\nthis file on \", mdx(ExternalLink, {\n    to: \"https://github.com/jayantbh/developer-site/tree/master/content/blog\",\n    mdxType: \"ExternalLink\"\n  }, \"Github\"), \"\\nand look at the relevant imported components.\"), mdx(\"h2\", null, \"1. Circular progress bars\"), mdx(\"p\", null, \"This is the first one you would have noticed, and it\\u2019s present only on this page\\nbecause I don\\u2019t really want it to be a site-wide thing.\"), mdx(\"p\", null, \"Progress bars are a ubiquitous thing, essential to letting a user know how much\\nof a certain process has been completed so far. Unlike a loading indicator, a\\nprogress bar allows a user a sense of how much time is left for a process or\\ntask to complete. Now, rectangular progress bars are pretty straight forward.\\nYou can take a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" inside another \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" and make the inner \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" have X% width\\nrelative to the outer one. Throw in some styling and you have a basic progress\\nbar.\"), mdx(\"p\", null, \"Circular progress bars can offer a nicer experience in some cases, and they\\ndon\\u2019t take up as much horizontal space which means more of them can be stacked\\nhorizontally. But since it could be particularly complex to get a partial\\ncircle, because regular elements don\\u2019t allow you to have a specific length on a\\nborder, you may be able to get 25/50/75/100% indications, but for finer control,\\nyou neen the SVG \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"circle\"), \" shape.\"), mdx(\"p\", null, \"Here\\u2019s an example of a circular progress bar to show your scroll progress\\nthrough the page. This progress bar is present on only this page on this site,\\nso if this annoys you, click on \\u201CShow Editor\\u201D, then in the Preview section,\\nclick on \\u201CHide scroll progress\\u201D.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\",\n    \"metastring\": \"hideable hidden title=ProgressIndicatorÂ componentÂ code\",\n    \"hideable\": true,\n    \"hidden\": true,\n    \"title\": \"ProgressIndicatorÂ componentÂ code\"\n  }, \"import React, { CSSProperties, FC } from 'react';\\nimport { motion } from 'framer-motion';\\n\\nconst radius = 10;\\nconst circumference = Math.ceil(2 * Math.PI * radius);\\n\\nconst progressStyles: CSSProperties = {\\n  position: 'fixed',\\n  bottom: '2rem',\\n  left: '2rem',\\n};\\n\\nexport const ProgressIndicator: FC<{ perc: number }> = ({ perc = 0 }) => (\\n  <svg height={22} width={22} style={progressStyles}>\\n    <motion.circle\\n      cx={11}\\n      cy={11}\\n      r={radius}\\n      strokeWidth={2}\\n      fill='none'\\n      stroke='teal'\\n      initial={{\\n        strokeDasharray: circumference,\\n        strokeDashoffset: 1,\\n      }}\\n      animate={{\\n        strokeDasharray: circumference,\\n        strokeDashoffset: circumference - circumference * (perc / 100),\\n      }}\\n      transition={{ ease: 'linear' }}\\n    />\\n  </svg>\\n);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\",\n    \"metastring\": \"live hideable hidden title=ProgressIndicatorÂ usageÂ code\",\n    \"live\": true,\n    \"hideable\": true,\n    \"hidden\": true,\n    \"title\": \"ProgressIndicatorÂ usageÂ code\"\n  }, \"const Progress = () => {\\n  const frameRef = useRef(-1);\\n  const [scrollPerc, setScrollPerc] = useState(scrollPosition());\\n  const [hideProgress, setHideProgress] = useState(false);\\n\\n  const updateScrollPerc = useCallback(() => {\\n    setScrollPerc(scrollPosition());\\n  }, []);\\n\\n  // The hook prevents firing the handler more than once per frame\\n  useEvents(['scroll', 'resize'], updateScrollPerc, {\\n    disabled: hideProgress,\\n  });\\n\\n  return (\\n    <>\\n      {!hideProgress && <ProgressIndicator perc={scrollPerc} />}\\n      <button onClick={() => setHideProgress(!hideProgress)}>\\n        {hideProgress ? 'Show' : 'Hide'} scroll progress\\n      </button>\\n    </>\\n  );\\n};\\n\\nrender(<Progress />);\\n\")), mdx(\"h2\", null, \"2. Animated list items\"), mdx(\"p\", null, \"Animating list items isn\\u2019t a complex feat to achieve in any library, but prepare\\nto have your mind blown at how easy it is here. Animating items in a list could\\nbe a great way to render items in a navbar, products list, users list, etc. It\\nideally shouldn\\u2019t be used in situations where getting to the data asap is more\\nimportant than fanciness, such as real-time metrics in a logs dashboard.\"), mdx(\"p\", null, \"We have two examples here. The first one is well suited for static lists, such\\nas a list of options/settings or menu items, things that are unlikely to change\\nduring a session. The second one is well suited for larger lists, where you may\\nhave infinite scrolling in place to fetch even more items.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\",\n    \"metastring\": \"live hideable hidden title=SimpleÂ ListItemsÂ implementationÂ code\",\n    \"live\": true,\n    \"hideable\": true,\n    \"hidden\": true,\n    \"title\": \"SimpleÂ ListItemsÂ implementationÂ code\"\n  }, \"const list = [1, 2, 3, 4];\\n\\nconst container = {\\n  hidden: { opacity: 0 },\\n  show: {\\n    opacity: 1,\\n    transition: {\\n      staggerChildren: 0.3,\\n    },\\n  },\\n};\\n\\nconst listItem = {\\n  hidden: { opacity: 0, y: -10 },\\n  show: { opacity: 1, y: 0 },\\n};\\n\\nconst ListItems = () => {\\n  const [visible, setVisible] = useState(false);\\n\\n  return (\\n    <>\\n      <div>\\n        <button onClick={() => setVisible(!visible)}>Toggle visibility</button>\\n      </div>\\n      <AnimatePresence>\\n        {visible && (\\n          <>\\n            <br />\\n            <motion.ul\\n              className='blocky-list'\\n              style={{ maxHeight: '400px', overflow: 'auto' }}\\n              variants={container}\\n              initial='hidden'\\n              animate='show'\\n              exit='hidden'\\n            >\\n              {list.map((item, i) => (\\n                <motion.li key={i} variants={listItem}>\\n                  {item}\\n                </motion.li>\\n              ))}\\n            </motion.ul>\\n          </>\\n        )}\\n      </AnimatePresence>\\n    </>\\n  );\\n};\\n\\nrender(<ListItems />);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\",\n    \"metastring\": \"live hideable hidden title=IncrementalÂ StaggerÂ ListItemsÂ implementationÂ code\",\n    \"live\": true,\n    \"hideable\": true,\n    \"hidden\": true,\n    \"title\": \"IncrementalÂ StaggerÂ ListItemsÂ implementationÂ code\"\n  }, \"const baseList = [1, 2, 3, 4, 5];\\n\\nconst ListItems = () => {\\n  const listRef = useRef(null);\\n  const [list, setList] = useState(baseList);\\n  const [visible, setVisible] = useState(false);\\n\\n  const prevList = usePrevious(list);\\n  const prevLen = (prevList || []).length;\\n\\n  return (\\n    <>\\n      <div>\\n        <button\\n          onClick={() => {\\n            setList([...list, ...baseList]);\\n            requestAnimationFrame(() => {\\n              console.log(listRef.current);\\n              listRef.current && listRef.current.scrollIntoViewIfNeeded();\\n            });\\n          }}\\n        >\\n          Add {baseList.length} to list (Now {list.length})\\n        </button>{' '}\\n        <button onClick={() => setList(baseList)}>Reset list</button>{' '}\\n        <button onClick={() => setVisible(!visible)}>Toggle visibility</button>\\n      </div>\\n      <AnimatePresence>\\n        {visible && (\\n          <>\\n            <br />\\n            <motion.ul\\n              className='blocky-list'\\n              style={{ maxHeight: '400px', overflow: 'auto' }}\\n              initial='hidden'\\n              animate='show'\\n              exit='hidden'\\n            >\\n              {list.map((item, i) => (\\n                <motion.li\\n                  key={i}\\n                  ref={i === list.length - 1 ? listRef : undefined}\\n                  initial={{ opacity: 0, x: -20 }}\\n                  animate={{ opacity: 1, x: 0 }}\\n                  exit={{ opacity: 0, transition: { delay: 0 } }}\\n                  transition={{\\n                    delay:\\n                      i - prevLen >= 0\\n                        ? (i - prevLen) * 0.1\\n                        : Math.log(i + 1) / 5,\\n                  }}\\n                >\\n                  Item {item} - {i}\\n                </motion.li>\\n              ))}\\n            </motion.ul>\\n          </>\\n        )}\\n      </AnimatePresence>\\n    </>\\n  );\\n};\\n\\nrender(<ListItems />);\\n\")), mdx(\"h2\", null, \"3. Lightboxing\"), mdx(\"p\", null, \"Did you try out the \\u201Cmaximize\\u201D button on the live code editors on this page yet?\\nThe lightbox functionality is powered by Framer Motion too! To see how exactly\\nthe code lightbox works, you\\u2019ll have to check \", mdx(ExternalLink, {\n    to: \"https://github.com/jayantbh/developer-site/tree/master/src/components/Code\",\n    mdxType: \"ExternalLink\"\n  }, \"Github\"), \"\\nagain.\"), mdx(\"p\", null, \"Lightboxing is a great way to show specific content by using the entire screen,\\nwithout taking the user to a new page. Now, if you could introduce an animation\\nsuch that the image/content could grow from its current position to fill the\\nwhole screen and then go back to where it\\u2019s supposed to be, it offers a really\\ngreat experience of being tethered to the rest of the content on the page.\"), mdx(\"p\", null, \"The below example will cover a lightweight version of a lightbox, using an image\\nexample.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\",\n    \"metastring\": \"live hideable hidden title=ImageÂ LightboxÂ example\",\n    \"live\": true,\n    \"hideable\": true,\n    \"hidden\": true,\n    \"title\": \"ImageÂ LightboxÂ example\"\n  }, \"const Img = styled(motion.img)`\\n  max-height: 90vh;\\n  max-width: 90vw;\\n  position: relative;\\n  margin: 0;\\n  overflow: hidden;\\n  border-radius: 8px;\\n`;\\n\\nconst LightboxContent = styled(motion.div)`\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  position: relative;\\n  min-height: 100px;\\n  overflow: hidden;\\n  border-radius: 8px;\\n`;\\n\\nconst HelpText = styled(motion.div)`\\n  position: absolute;\\n  bottom: 2rem;\\n  margin: auto;\\n  background: #fff8;\\n  border-radius: 100vw;\\n  padding: 4px 16px;\\n`;\\n\\nconst Backdrop = styled(motion.div)`\\n  background-color: #8885;\\n  backdrop-filter: blur(4px);\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n`;\\n\\nconst lightboxStyles = {\\n  position: 'fixed',\\n  top: '0',\\n  left: '0',\\n  right: '0',\\n  bottom: '0',\\n  margin: 'auto',\\n};\\n\\nconst Lightbox = () => {\\n  const [maximized, setMaximized] = useState(false);\\n  const [size, setSize] = useState({ height: 'auto', width: 'auto' });\\n\\n  const toggleMaximized = () => {\\n    setMaximized(!maximized);\\n  };\\n\\n  return (\\n    <div style={{ height: size.height, width: size.width }}>\\n      <LightboxContent\\n        layout\\n        style={maximized ? lightboxStyles : {}}\\n        animate={{\\n          zIndex: maximized ? 100 : 0,\\n          transition: {\\n            delay: maximized ? 0 : 1,\\n          },\\n        }}\\n      >\\n        <Backdrop layout />\\n        <Img\\n          layout\\n          onLoad={(e) => {\\n            setSize({\\n              height: e.target.parentElement.clientHeight,\\n              width: e.target.parentElement.clientWidth,\\n            });\\n          }}\\n          src={puzzle}\\n          onClick={toggleMaximized}\\n        />\\n        <HelpText layout='position'>Click on the photo</HelpText>\\n      </LightboxContent>\\n    </div>\\n  );\\n};\\n\\nrender(<Lightbox />);\\n\")), mdx(\"h3\", null, \"There will be more stuff here, such as image gallery/carousel, toasts, expanding content cards, maybe more.\"), mdx(\"p\", null, \"To be continued.\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":2}}},"staticQueryHashes":["3128451518","426816048"]}